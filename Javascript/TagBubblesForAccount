//temporary array to store manipulated tag values until the user saves the form
let tempTagsArray = [];
   
/*
This function is called by AccountForm.html (or 'WebResource_AccountFormDisplay' within the context of the form).
to ensure the code only runs once the HTML is loaded. As a result, this code is not used as a traditional event handler in the form editor,
but is accessed by the HTML instead, through the application's web resource library. 
*/
function formOnLoad() { 
    //console.log("in the formOnLoad function");
    var formContext = parent.Xrm.Page;
    formContext.data.entity.addOnSave(function () {
        formContext.getAttribute("cr7e8_accounttags").setValue(tempTagsArray.join(', '));
        console.log("Tags saved to cr7e8_accounttags.");
    });
    InitializeTagContainers(formContext);
}

function InitializeTagContainers(formContext) { 
    //console.log("JavaScript function called after page load");
    console.log("Initializing form");
    tempTagsArray = tagTransform(formContext);
    //console.log(tempTagsArray);
    displayTagsAsBubbles(formContext); 
}

function tagTransform(formContext) {
    const accountTags = formContext.getAttribute("cr7e8_accounttags").getValue();
    if (accountTags) {
        return accountTags.split(/[,;]/).map(tag => tag.trim());
    } else {
        console.log("No tags found for the current account.");
        return [];
    }
}

function createBubble(tag, container) {
    const bubble = document.createElement("div");
    bubble.className = "bubble";

    const bubbleText = document.createElement("span");
    bubbleText.textContent = tag;
    bubble.appendChild(bubbleText);

    const deleteButton = document.createElement("span");
    deleteButton.className = "delete-button";
    deleteButton.innerHTML = "&times;";
    deleteButton.style.marginLeft = "12px";
    deleteButton.style.fontSize = "14px";
    deleteButton.onclick = () => {
        console.log("Delete button clicked for tag:", tag);
        bubble.remove();
        const tagIndex = tempTagsArray.indexOf(tag);
        if (tagIndex > -1) { 
            tempTagsArray.splice(tagIndex, 1); 
        }
    };

    bubble.appendChild(deleteButton);

    bubble.ondblclick = () => {
        console.log("Bubble double-clicked for tag:", tag);
        const input = document.createElement("input");
        input.type = "text";
        input.value = tag;
        input.className = "edit-input";
        input.style.fontFamily = "'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif";
        input.style.fontSize = bubbleText.style.fontSize;
        input.style.border = "none";
        input.style.outline = "none";
        input.style.height = "100%";
        input.style.backgroundColor = "#ffffff";
        input.style.padding = "0 10px";

        const tempSpan = document.createElement("span");
        tempSpan.style.fontFamily = input.style.fontFamily;
        tempSpan.style.fontSize = input.style.fontSize;
        tempSpan.style.visibility = "hidden";
        tempSpan.style.position = "absolute";
        tempSpan.textContent = input.value;
        document.body.appendChild(tempSpan);
        const textWidth = tempSpan.offsetWidth;
        document.body.removeChild(tempSpan);

        input.style.width = `${textWidth + 20}px`;
        bubbleText.replaceWith(input);
        input.focus();

        const tagInput = () => {
            const updatedTag = input.value.trim();
            if (updatedTag && updatedTag !== tag && !tempTagsArray.includes(updatedTag)) {
                const tagIndex = tempTagsArray.indexOf(tag);
                if (tagIndex !== -1) {
                    tempTagsArray[tagIndex] = updatedTag;
                    bubbleText.textContent = updatedTag;
                }
            }
            input.replaceWith(bubbleText);
        };

        input.addEventListener("blur", tagInput);
        input.addEventListener("keydown", (e) => {
            if (e.key === "Enter") {
                tagInput();
            }
        });
    };

    container.insertBefore(bubble, container.lastChild);
}

function handleTagInput(input, inputBubble, addBubble, container) {
    const newTag = input.value.trim();
    if (newTag && !tempTagsArray.includes(newTag)) {
        tempTagsArray.push(newTag);
        inputBubble.replaceWith(addBubble);
        createBubble(newTag, container);
    } else {
        inputBubble.replaceWith(addBubble);
    }
}

function displayTagsAsBubbles(formContext) {
    console.log("displayTagsAsBubbles function called with tags:", tempTagsArray);
    console.log("tempTagsArray:", tempTagsArray);
    const container = document.createElement("div");
    container.className = "bubble-container";

    const addBubble = document.createElement("div"); //this is the "+" bubble which acts as an Add Tag button.
    addBubble.className = "bubble";
    addBubble.textContent = "+";
    addBubble.style.cursor = "pointer";
    addBubble.style.padding = "5px 10px";
    addBubble.style.width = "auto";

    addBubble.onclick = () => {
        const inputBubble = document.createElement("div");
        inputBubble.className = "bubble";
        const input = document.createElement("input");
        input.type = "text";
        input.className = "edit-input";
        input.style.fontFamily = "'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif";
        input.style.fontSize = "14px";
        input.style.border = "none";
        input.style.outline = "none";
        input.style.height = "100%";
        input.style.backgroundColor = "#ffffff";
        input.style.padding = "0 10px";
        inputBubble.appendChild(input);
        addBubble.replaceWith(inputBubble);
        input.focus();

        input.addEventListener("blur", () => handleTagInput(input, inputBubble, addBubble, container));
        input.addEventListener("keydown", (e) => {
            if (e.key === "Enter") {
                handleTagInput(input, inputBubble, addBubble, container);
            }
        });
    };
    container.appendChild(addBubble);

    tempTagsArray.forEach(tag => createBubble(tag, container));

    const webResourceControl = formContext.getControl("WebResource_AccountFormDisplay");
    if (webResourceControl) {
        const webResourceObject = webResourceControl.getObject();
        if (webResourceObject) {
            const appendBubbles = () => {
                const webResourceElement = webResourceObject.contentDocument || webResourceObject.contentWindow.document;
                if (webResourceElement) {
                    webResourceElement.body.innerHTML = '';
                    webResourceElement.body.appendChild(container);
                } else {
                    console.error("ERROR 3: Web resource element still not found after load.");
                }
            }
            appendBubbles();
        } else {
            console.error("ERROR 2: Web resource object not found.");
        }
    } else {
        console.error("ERROR 1: Web resource control not found.");
    }
}