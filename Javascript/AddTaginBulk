// Function to fetch account names by IDs from PowerApps Dataverse using Xrm.WebApi.retrieveMultipleRecords
async function getAccountNamesByIds(selectedItemIds) {
    const entityLogicalName = "account";
    const filter = selectedItemIds.map(id => `accountid eq ${id}`).join(" or ");
    const options = `?$select=name&$filter=${filter}`;

    try {
        const result = await Xrm.WebApi.retrieveMultipleRecords(entityLogicalName, options);
        const accountNames = result.entities.map(account => account.name);
        return accountNames;
    } catch (error) {
        console.error("Error:", error);
        return ["Unknown Account"];
    }
}

function collectInput() {
    //console.log("Bubble double-clicked for tag:", tag);
    const rect = commandButton.getBoundingClientRect();
    const input = document.createElement("input");
    input.type = "text";
    input.value = tag;
    input.className = "edit-input";
    input.style.fontFamily = "'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif";
    input.style.fontSize = "14px";
    input.style.border = "none";
    input.style.outline = "none";
    input.style.height = "100%";
    input.style.backgroundColor = "#ffffff";
    input.style.padding = "0 10px";

    const tempSpan = document.createElement("span");
    tempSpan.style.fontFamily = input.style.fontFamily;
    tempSpan.style.fontSize = input.style.fontSize;
    tempSpan.style.visibility = "hidden";
    tempSpan.style.position = "absolute";
    tempSpan.textContent = input.value;
    document.body.appendChild(tempSpan);
    const textWidth = tempSpan.offsetWidth;
    document.body.removeChild(tempSpan);

    input.style.width = `${textWidth + 20}px`;

    // Position the input bubble below the command button
    input.style.position = "absolute";
    input.style.top = `${rect.bottom + window.scrollY}px`;
    input.style.left = `${rect.left + window.scrollX}px`;

    document.body.appendChild(input);
    input.focus();

    const tagInput = () => {
        const updatedTag = input.value.trim();
        if (updatedTag && updatedTag !== tag && !tempTagsArray.includes(updatedTag)) {
            const tagIndex = tempTagsArray.indexOf(tag);
            if (tagIndex !== -1) {
                tempTagsArray[tagIndex] = updatedTag;
                bubbleText.textContent = updatedTag;
            }
        }
        input.replaceWith(bubbleText);
    };

    input.addEventListener("blur", tagInput);
    input.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
            tagInput();
        }
    });
};

// Function to handle selected item IDs
async function handleSelectedItems(selectedItemIds) {
    // Check if the selectedItemIds array is not empty
    if (selectedItemIds && selectedItemIds.length > 0) {
        const accountNames = await getAccountNamesByIds(selectedItemIds);
        console.log("Selected Item IDs:", selectedItemIds, "Account Names:", accountNames);

        // Display the account names in a side pane
        const paneOptions = {
            title: "Selected Accounts",
            canClose: true,
            width: 300
        };

        const paneContent = `
            <div>
                <h2>Selected Accounts</h2>
                <ul>
                    ${accountNames.map(name => `<li>${name}</li>`).join('')}
                </ul>
            </div>
        `;

        Xrm.Panel.loadPanel(paneOptions, paneContent);
    } else {
        console.log("No items selected.");
    }
}